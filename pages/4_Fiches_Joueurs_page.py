import streamlit as st
import pandas as pd
import os
import plotly.express as px
import base64

# Chemin vers ton image
image_path = "images/logo.png"

# Lire l'image en base64
def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

img_base64 = get_base64_of_bin_file(image_path)

# CSS + HTML pour logo fix√© en haut √† droite, image en taille native
html_code = f"""
<style>
.logo-top-right {{
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 9999;
    max-width: 150px;
}}
.logo-top-right img {{
    width: 100%;
    height: auto;
    display: block;
}}
</style>
<div class="logo-top-right">
    <img src="data:image/png;base64,{img_base64}" />
</div>
"""

st.markdown(html_code, unsafe_allow_html=True)


# Intro Fiche joueur



st.title("Fiches Joueurs")

# üìÇ Chargement des donn√©es
df_fiche_joueur = pd.read_excel("data/Informations joueurs.xlsx")

# üßº Nettoyage du nom des colonnes
df_fiche_joueur.columns = df_fiche_joueur.columns.str.strip()

# üìã Conversion de la date de naissance en datetime (si n√©cessaire)
if 'Date de naissance' in df_fiche_joueur.columns:
    df_fiche_joueur['Date de naissance'] = pd.to_datetime(df_fiche_joueur['Date de naissance'], errors='coerce')

# üìã S√©lection d‚Äôun joueur unique
joueurs = df_fiche_joueur['Nom du joueur'].dropna().unique().tolist()
joueurs.sort()

joueur_choisi = st.selectbox("S√©lectionner un joueur", joueurs)

# üìÑ Filtrage
df_joueur = df_fiche_joueur[df_fiche_joueur['Nom du joueur'] == joueur_choisi]

# üì∏ Affichage en 2 colonnes : photo | infos
col1, col2 = st.columns([1, 2])

with col1:
    chemin_photos = "/Users/christophergallo/Desktop/Application perso/Photos joueurs"
    image_trouv√©e = False
    for ext in ['.jpg', '.jpeg', '.png']:
        chemin_image = os.path.join(chemin_photos, joueur_choisi + ext)
        if os.path.isfile(chemin_image):
            st.image(chemin_image, caption=joueur_choisi, width=200)
            image_trouv√©e = True
            break
    if not image_trouv√©e:
        st.warning("üì∏ Aucune image trouv√©e.")

with col2:
    st.subheader(f"Informations sur {joueur_choisi}")
    colonnes_a_afficher = ['Poste', 'Date de naissance', 'Taille', 'Poids', 'Nationalit√©']
    for col in colonnes_a_afficher:
        if col in df_joueur.columns:
            valeur = df_joueur[col].values[0]
            if col == 'Date de naissance' and pd.notnull(valeur):
                valeur = pd.to_datetime(valeur).strftime('%d/%m/%Y')  # Format personnalis√© ici
            st.write(f"**{col} :** {valeur}")





# Tableau temps de jeu





# üìÇ Chargement du nouveau fichier Excel
df_stats_joueur = pd.read_excel("/Users/christophergallo/Desktop/Application perso/data/Temps de jeu.xlsx", index_col=None)

# üßº Nettoyage des colonnes si n√©cessaire
df_stats_joueur.columns = df_stats_joueur.columns.str.strip()

# üìÑ Filtrage sur le joueur choisi
df_stats_filtr√© = df_stats_joueur[df_stats_joueur['Nom du joueur'] == joueur_choisi]

st.subheader(f"Temps de jeu")

if not df_stats_filtr√©.empty:
    colonnes_a_afficher = [
        'Temps de jeu Total (min)',
        'Temps de jeu N3 (min)',
        'Temps de jeu CDF (min)',
        'Temps de jeu Matchs Amicaux (min)',
        'Temps de jeu R√©serve (min)'
    ]
    
    df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()

    # Construction du markdown du tableau
    header = "| " + " | ".join(colonnes_a_afficher) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_a_afficher)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    tableau_md = "\n".join([header, separator] + rows)

    st.markdown(tableau_md)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")





# Graph Temps de jeu






if not df_stats_filtr√©.empty:
    colonnes_a_afficher = [
        'Temps de jeu Total (min)',
        'Temps de jeu N3 (min)',
        'Temps de jeu CDF (min)',
        'Temps de jeu Matchs Amicaux (min)',
        'Temps de jeu R√©serve (min)'
    ]

    df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()

    # Tableau Markdown
    header = "| " + " | ".join(colonnes_a_afficher) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_a_afficher)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]
    tableau_md = "\n".join([header, separator] + rows)
    #st.markdown(tableau_md)

    # Calcul des totaux pour le camembert
    totaux = df_leg.sum()

    # On √©vite de compter "Temps de jeu Total (min)" dans le camembert si tu veux juste les composantes
    labels = ['N3', 'CDF', 'Matchs Amicaux', 'R√©serve']
    values = [
        totaux['Temps de jeu N3 (min)'],
        totaux['Temps de jeu CDF (min)'],
        totaux['Temps de jeu Matchs Amicaux (min)'],
        totaux['Temps de jeu R√©serve (min)']
    ]

    # G√©n√©ration du camembert avec Plotly
    fig = px.pie(
        names=labels,
        values=values,
        title="",
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig.update_traces(textinfo='percent+label')

    st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.") 







# Tableau d√©tail Match







st.subheader(f"D√©tails matchs")

if not df_stats_filtr√©.empty:
    colonnes_a_afficher = [
        'Nombre de matchs Total',
        'Nombre de Titularisation Totale',
        'Entr√©e en jeu Total',
        'Nombre matchs N3',
        'Nombre de Titularisation N3',
        'Entr√©e en jeu N3',
        'Nombre matchs CDF',
        'Nombre de Titularisation CDF',
        'Entr√©e en jeu CDF',
        'Nombre matchs R√©serve',
        'Nombre matchs amicaux'
    ]
    
    df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()

    # Construction du markdown du tableau
    header = "| " + " | ".join(colonnes_a_afficher) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_a_afficher)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    tableau_md = "\n".join([header, separator] + rows)

    st.markdown(tableau_md)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")




# Graphs D√©tail Match






if not df_stats_filtr√©.empty:

    # COLONNES STREAMLIT POUR ORGANISER LES CAMEMBERTS
    col1, col2 = st.columns(2)

    # Premier camembert : r√©partition des matchs par type
    with col1:
        colonnes_a_afficher = [
            'Nombre de matchs Total',
            'Nombre matchs N3',
            'Nombre matchs CDF',
            'Nombre matchs amicaux',
            'Nombre matchs R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'Matchs Amicaux', 'R√©serve']
        values = [
            totaux['Nombre matchs N3'],
            totaux['Nombre matchs CDF'],
            totaux['Nombre matchs amicaux'],
            totaux['Nombre matchs R√©serve']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Matchs Total",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    # Deuxi√®me camembert : statut N3
    with col2:
        colonnes_a_afficher = [
            'Nombre matchs N3',
            'Nombre de Titularisation N3',
            'Entr√©e en jeu N3',
            'Non entr√©e en jeu N3',
            'Hors groupe N3'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation N3'],
            totaux['Entr√©e en jeu N3'],
            totaux['Non entr√©e en jeu N3'],
            totaux['Hors groupe N3']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="N3",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

if not df_stats_filtr√©.empty:

    # COLONNES STREAMLIT POUR ORGANISER LES CAMEMBERTS
    col1, col2 = st.columns(2)

    with col1:
        colonnes_a_afficher = [
            'Nombre matchs CDF',
            'Nombre de Titularisation CDF',
            'Entr√©e en jeu CDF',
            'Non entr√©e en jeu CDF',
            'Hors groupe CDF'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation CDF'],
            totaux['Entr√©e en jeu CDF'],
            totaux['Non entr√©e en jeu CDF'],
            totaux['Hors groupe CDF']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="CDF",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        colonnes_a_afficher = [
            'Nombre matchs R√©serve',
            'Nombre de Titularisation R√©serve',
            'Entr√©e en jeu R√©serve',
            'Non entr√©e en jeu R√©serve',
            'Hors groupe R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation R√©serve'],
            totaux['Entr√©e en jeu R√©serve'],
            totaux['Non entr√©e en jeu R√©serve'],
            totaux['Hors groupe R√©serve']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="R√©serve",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")




# Tableau Statistique Matchs



st.subheader(f"Statistiques matchs")

if not df_stats_filtr√©.empty:
    colonnes_a_afficher = [
        'Buts Total',
        'Passes D Total',
        'Buts Ttes comp√©t confondues',
        'Passes D Ttes comp√©t confondues',
        'Buts N3',
        'Passes D N3',
        'Buts CDF',
        'Passes D CDF',
        'Buts Matchs Amicaux',
        'Passes D Matchs Amicaux',
        'Buts R√©serve',
        'Passes D R√©serve'
    ]
    
    df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()

    # Construction du markdown du tableau
    header = "| " + " | ".join(colonnes_a_afficher) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_a_afficher)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    tableau_md = "\n".join([header, separator] + rows)

    st.markdown(tableau_md)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")





# Graph Statistique Matchs






if not df_stats_filtr√©.empty:

    # COLONNES STREAMLIT POUR ORGANISER LES CAMEMBERTS
    col1, col2 = st.columns(2)

    with col1:
        colonnes_a_afficher = [
            'Buts Ttes comp√©t confondues',
            'Buts N3',
            'Buts CDF',
            'Buts R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'R√©serve']
        values = [
            totaux['Buts N3'],
            totaux['Buts CDF'],
            totaux['Buts R√©serve'],
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Buts Ttes comp√©t confondues",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        colonnes_a_afficher = [
            'Passes D Ttes comp√©t confondues',
            'Passes D N3',
            'Passes D CDF',
            'Passes D R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_a_afficher].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'R√©serve']
        values = [
            totaux['Passes D N3'],
            totaux['Passes D CDF'],
            totaux['Passes D R√©serve'],
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Passes D Ttes comp√©t confondues",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")








# Pr√©sences Entrainement







# üìÇ Chargement du nouveau fichier Excel
df_pr√©sences_joueur = pd.read_excel("/Users/christophergallo/Desktop/Application perso/data/Pr√©sences.xlsx", index_col=None)
df_pr√©sences_joueur.columns = df_pr√©sences_joueur.columns.str.strip()


# Tableau pr√©sences
st.subheader(f"Pr√©sences Entra√Ænement")

df_pr√©sence_filtr√© = df_pr√©sences_joueur[df_pr√©sences_joueur['Nom du joueur'] == joueur_choisi]

if not df_pr√©sence_filtr√©.empty:
    colonnes_a_afficher = [
        'Nombre entrainements total',
        'Pr√©sences',
        'Absences',
        'Blessures',
        'Malade',
        'R√©serve',
        'S√©lections'
    ]
    
    df_leg = df_pr√©sence_filtr√©[colonnes_a_afficher].copy()

    header = "| " + " | ".join(colonnes_a_afficher) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_a_afficher)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    tableau_md = "\n".join([header, separator] + rows)
    st.markdown(tableau_md)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")







# Graph pr√©sence






# Filtrage sur le joueur pour les pr√©sences
df_pr√©sence_filtr√© = df_pr√©sences_joueur[df_pr√©sences_joueur['Nom du joueur'] == joueur_choisi]

if not df_pr√©sence_filtr√©.empty:
    colonnes_a_afficher = [
        'Nombre entrainements total',
        'Pr√©sences',
        'Absences',
        'Blessures',
        'Malade',
        'R√©serve',
        'S√©lections'
    ]

    df_leg = df_pr√©sence_filtr√©[colonnes_a_afficher].copy()
    totaux = df_leg.sum()

    labels = ['Pr√©sences', 'Absences', 'Blessures', 'Malade', 'R√©serve', 'S√©lections']
    values = [
        totaux['Pr√©sences'],
        totaux['Absences'],
        totaux['Blessures'],
        totaux['Malade'],
        totaux['R√©serve'],
        totaux['S√©lections']
    ]

    fig = px.pie(
        names=labels,
        values=values,
        title="",
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")





# Tableau et Graph Poids


# üìÇ Chargement du nouveau fichier Excel
df_PoidsMG_joueur = pd.read_excel("/Users/christophergallo/Desktop/Application perso/data/Poids-Masse grasse.xlsx", index_col=None)


st.subheader("Poids")

# üéØ Filtrage du joueur
df_PoidsMG_filtr√© = df_PoidsMG_joueur[df_PoidsMG_joueur['Nom du joueur'] == joueur_choisi]

if not df_PoidsMG_filtr√©.empty:
    colonnes_a_afficher = ['Date', 'Poids (en kg)']

    if all(col in df_PoidsMG_filtr√©.columns for col in colonnes_a_afficher):
        df_leg = df_PoidsMG_filtr√©[colonnes_a_afficher].copy()

        # ‚úÖ Convertir Date en datetime pour le tri
        df_leg['Date'] = pd.to_datetime(df_leg['Date'])
        df_leg = df_leg.sort_values('Date')

        # ‚ûï Cr√©ation d'une colonne "Date format√©e" pour affichage
        df_leg['Date affich√©e'] = df_leg['Date'].dt.strftime("%d/%m/%Y")

        # üìã Tableau Markdown
        df_leg_affichage = df_leg[['Date affich√©e', 'Poids (en kg)']]
        header = "| Date | Poids (en kg) |"
        separator = "|---|---|"
        rows = [f"| {row[0]} | {row[1]} |" for row in df_leg_affichage.values]
        st.markdown("\n".join([header, separator] + rows))

        # üìà Graphique avec dates en abscisse format√©es
        fig = px.line(
            df_leg,
            x="Date affich√©e",
            y="Poids (en kg)",
            title="",
            markers=True,
        )
        fig.update_layout(xaxis_title="Date", yaxis_title="Poids (en kg)")
        st.plotly_chart(fig)

    else:
        st.warning("‚ö†Ô∏è Les colonnes attendues sont absentes.")
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")







# Tableau et Graph MG



st.subheader("Masse Grasse")

# üéØ Filtrage du joueur s√©lectionn√©
df_PoidsMG_filtr√© = df_PoidsMG_joueur[df_PoidsMG_joueur['Nom du joueur'] == joueur_choisi]

# üìã V√©rification et traitement
if not df_PoidsMG_filtr√©.empty:
    colonnes_a_afficher = ['Date', 'MG (%)']

    if all(col in df_PoidsMG_filtr√©.columns for col in colonnes_a_afficher):
        df_leg = df_PoidsMG_filtr√©[colonnes_a_afficher].copy()

        # ‚úÖ Formatage date
        df_leg['Date'] = pd.to_datetime(df_leg['Date'])
        df_leg = df_leg.sort_values('Date')
        df_leg['Date affich√©e'] = df_leg['Date'].dt.strftime("%d/%m/%Y")

        # ‚úÖ Conversion MG en pourcentage si exprim√© en fraction
        df_leg['MG (%)'] = pd.to_numeric(df_leg['MG (%)'], errors='coerce')
        if df_leg['MG (%)'].max() <= 1:
            df_leg['MG (%)'] = df_leg['MG (%)'] * 100

        # ‚úÖ Colonne format√©e pour affichage dans le tableau
        df_leg['MG affich√©e'] = df_leg['MG (%)'].map(lambda x: f"{x:.1f} %" if pd.notnull(x) else "‚Äî")

        # üìã Affichage tableau Markdown
        df_leg_affichage = df_leg[['Date affich√©e', 'MG affich√©e']]
        header = "| Date | Masse grasse (%) |"
        separator = "|---|---|"
        rows = [f"| {row[0]} | {row[1]} |" for row in df_leg_affichage.values]
        st.markdown("\n".join([header, separator] + rows))

        # üìà Graphique Plotly
        fig = px.line(
            df_leg,
            x='Date affich√©e',
            y='MG (%)',
            title="",
            markers=True
        )
        fig.update_layout(xaxis_title="Date", yaxis_title="Masse grasse (%)")
        st.plotly_chart(fig)

    else:
        st.warning("‚ö†Ô∏è Les colonnes 'Date' ou 'MG (%)' sont absentes.")
else:
    st.info("‚ÑπÔ∏è Aucune donn√©e de masse grasse pour ce joueur.")
