import streamlit as st
import pandas as pd
import os
import plotly.express as px
import base64

# Dossier base du script
BASE_DIR = os.path.dirname(__file__)

# Fonction pour charger image en base64 (logo)
def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

# Logo en haut √† droite
image_path = os.path.join(BASE_DIR, "images", "Doc1-1.png")
if os.path.isfile(image_path):
    img_base64 = get_base64_of_bin_file(image_path)
    html_code = f"""
    <style>
    .logo-top-right {{
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 9999;
        max-width: 150px;
    }}
    .logo-top-right img {{
        width: 100%;
        height: auto;
        display: block;
    }}
    </style>
    <div class="logo-top-right">
        <img src="data:image/png;base64,{img_base64}" />
    </div>
    """
    st.markdown(html_code, unsafe_allow_html=True)
else:
    st.warning(f"Logo non trouv√© : {image_path}")

st.title("Fiches Joueurs")

data_dir = os.path.join(BASE_DIR, "data")

# --- Chargement donn√©es Fiche Joueur ---
fiche_joueur_path = os.path.join(data_dir, "Informations joueurs.xlsx")
try:
    df_fiche_joueur = pd.read_excel(fiche_joueur_path)
except Exception as e:
    st.error(f"Erreur lors du chargement du fichier Informations joueurs.xlsx : {e}")
    st.stop()

df_fiche_joueur.columns = df_fiche_joueur.columns.str.strip()

if 'Date de naissance' in df_fiche_joueur.columns:
    df_fiche_joueur['Date de naissance'] = pd.to_datetime(df_fiche_joueur['Date de naissance'], errors='coerce')

joueurs = df_fiche_joueur['Nom du joueur'].dropna().unique().tolist()
joueurs.sort()

joueur_choisi = st.selectbox("S√©lectionner un joueur", joueurs)

df_joueur = df_fiche_joueur[df_fiche_joueur['Nom du joueur'] == joueur_choisi]

col1, col2 = st.columns([1, 2])

with col1:
    chemin_photos = os.path.join(BASE_DIR, "Photos joueurs")
    image_trouvee = False
    for ext in ['.jpg', '.jpeg', '.png']:
        chemin_image = os.path.join(chemin_photos, joueur_choisi + ext)
        if os.path.isfile(chemin_image):
            st.image(chemin_image, caption=joueur_choisi, width=200)
            image_trouvee = True
            break
    if not image_trouvee:
        st.warning("üì∏ Aucune image trouv√©e.")

with col2:
    st.subheader(f"Informations sur {joueur_choisi}")
    colonnes_a_afficher = ['Poste', 'Date de naissance', 'Taille', 'Poids', 'Nationalit√©']
    for col in colonnes_a_afficher:
        if col in df_joueur.columns:
            valeur = df_joueur[col].values[0]
            if col == 'Date de naissance' and pd.notnull(valeur):
                valeur = pd.to_datetime(valeur).strftime('%d/%m/%Y')
            st.write(f"**{col} :** {valeur}")

# --- Temps de jeu ---
stats_path = os.path.join(data_dir, "Temps de jeu.xlsx")
try:
    df_stats_joueur = pd.read_excel(stats_path)
except Exception as e:
    st.error(f"Erreur lors du chargement du fichier Temps de jeu.xlsx : {e}")
    st.stop()

df_stats_joueur.columns = df_stats_joueur.columns.str.strip()
df_stats_filtr√© = df_stats_joueur[df_stats_joueur['Nom du joueur'] == joueur_choisi]

st.subheader("Temps de jeu")

if not df_stats_filtr√©.empty:
    colonnes_temps = [
        'Temps de jeu Total (min)',
        'Temps de jeu N3 (min)',
        'Temps de jeu CDF (min)',
        'Temps de jeu Matchs Amicaux (min)',
        'Temps de jeu R√©serve (min)'
    ]

    df_leg = df_stats_filtr√©[colonnes_temps].copy()

    header = "| " + " | ".join(colonnes_temps) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_temps)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    st.markdown("\n".join([header, separator] + rows))

    totaux = df_leg.sum()
    labels = ['N3', 'CDF', 'Matchs Amicaux', 'R√©serve']
    values = [
        totaux['Temps de jeu N3 (min)'],
        totaux['Temps de jeu CDF (min)'],
        totaux['Temps de jeu Matchs Amicaux (min)'],
        totaux['Temps de jeu R√©serve (min)']
    ]

    fig = px.pie(
        names=labels,
        values=values,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- D√©tails matchs ---
st.subheader("D√©tails matchs")

if not df_stats_filtr√©.empty:
    colonnes_matchs = [
        'Nombre de matchs Total',
        'Nombre de Titularisation Totale',
        'Entr√©e en jeu Total',
        'Nombre matchs N3',
        'Nombre de Titularisation N3',
        'Entr√©e en jeu N3',
        'Nombre matchs CDF',
        'Nombre de Titularisation CDF',
        'Entr√©e en jeu CDF',
        'Nombre matchs R√©serve',
        'Nombre matchs amicaux'
    ]

    df_leg = df_stats_filtr√©[colonnes_matchs].copy()

    header = "| " + " | ".join(colonnes_matchs) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_matchs)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    st.markdown("\n".join([header, separator] + rows))
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- Graphs d√©tails matchs ---
if not df_stats_filtr√©.empty:
    col1, col2 = st.columns(2)

    with col1:
        colonnes_cam1 = [
            'Nombre de matchs Total',
            'Nombre matchs N3',
            'Nombre matchs CDF',
            'Nombre matchs amicaux',
            'Nombre matchs R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_cam1].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'Matchs Amicaux', 'R√©serve']
        values = [
            totaux['Nombre matchs N3'],
            totaux['Nombre matchs CDF'],
            totaux['Nombre matchs amicaux'],
            totaux['Nombre matchs R√©serve']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Matchs Total",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        colonnes_cam2 = [
            'Nombre matchs N3',
            'Nombre de Titularisation N3',
            'Entr√©e en jeu N3',
            'Non entr√©e en jeu N3',
            'Hors groupe N3'
        ]

        df_leg = df_stats_filtr√©[colonnes_cam2].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation N3'],
            totaux['Entr√©e en jeu N3'],
            totaux['Non entr√©e en jeu N3'],
            totaux['Hors groupe N3']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="N3",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

if not df_stats_filtr√©.empty:
    col1, col2 = st.columns(2)

    with col1:
        colonnes_cam3 = [
            'Nombre matchs CDF',
            'Nombre de Titularisation CDF',
            'Entr√©e en jeu CDF',
            'Non entr√©e en jeu CDF',
            'Hors groupe CDF'
        ]

        df_leg = df_stats_filtr√©[colonnes_cam3].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation CDF'],
            totaux['Entr√©e en jeu CDF'],
            totaux['Non entr√©e en jeu CDF'],
            totaux['Hors groupe CDF']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="CDF",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        colonnes_cam4 = [
            'Nombre matchs R√©serve',
            'Nombre de Titularisation R√©serve',
            'Entr√©e en jeu R√©serve',
            'Non entr√©e en jeu R√©serve',
            'Hors groupe R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_cam4].copy()
        totaux = df_leg.sum()
        labels = ['Titularisation', 'Entr√©e en jeu', 'Non entr√©e en jeu', 'Hors groupe']
        values = [
            totaux['Nombre de Titularisation R√©serve'],
            totaux['Entr√©e en jeu R√©serve'],
            totaux['Non entr√©e en jeu R√©serve'],
            totaux['Hors groupe R√©serve']
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="R√©serve",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- Statistiques matchs ---
st.subheader("Statistiques matchs")

if not df_stats_filtr√©.empty:
    colonnes_stats = [
        'Buts Total',
        'Passes D Total',
        'Buts Ttes comp√©t confondues',
        'Passes D Ttes comp√©t confondues',
        'Buts N3',
        'Passes D N3',
        'Buts CDF',
        'Passes D CDF',
        'Buts Matchs Amicaux',
        'Passes D Matchs Amicaux',
        'Buts R√©serve',
        'Passes D R√©serve'
    ]

    df_leg = df_stats_filtr√©[colonnes_stats].copy()

    header = "| " + " | ".join(colonnes_stats) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_stats)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    st.markdown("\n".join([header, separator] + rows))
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- Graphs Statistiques matchs ---
if not df_stats_filtr√©.empty:
    col1, col2 = st.columns(2)

    with col1:
        colonnes_buts = [
            'Buts Ttes comp√©t confondues',
            'Buts N3',
            'Buts CDF',
            'Buts R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_buts].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'R√©serve']
        values = [
            totaux['Buts N3'],
            totaux['Buts CDF'],
            totaux['Buts R√©serve'],
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Buts Ttes comp√©t confondues",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        colonnes_passes = [
            'Passes D Ttes comp√©t confondues',
            'Passes D N3',
            'Passes D CDF',
            'Passes D R√©serve'
        ]

        df_leg = df_stats_filtr√©[colonnes_passes].copy()
        totaux = df_leg.sum()
        labels = ['N3', 'CDF', 'R√©serve']
        values = [
            totaux['Passes D N3'],
            totaux['Passes D CDF'],
            totaux['Passes D R√©serve'],
        ]

        fig = px.pie(
            names=labels,
            values=values,
            title="Passes D Ttes comp√©t confondues",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig.update_traces(textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- Pr√©sences Entra√Ænement ---
pr√©sences_path = os.path.join(data_dir, "Pr√©sences.xlsx")
try:
    df_pr√©sences_joueur = pd.read_excel(pr√©sences_path)
except Exception as e:
    st.error(f"Erreur lors du chargement du fichier Pr√©sences.xlsx : {e}")
    st.stop()

df_pr√©sences_joueur.columns = df_pr√©sences_joueur.columns.str.strip()
df_pr√©sence_filtr√© = df_pr√©sences_joueur[df_pr√©sences_joueur['Nom du joueur'] == joueur_choisi]

st.subheader("Pr√©sences Entra√Ænement")

if not df_pr√©sence_filtr√©.empty:
    colonnes_pr√©sences = [
        'Nombre entrainements total',
        'Pr√©sences',
        'Absences',
        'Blessures',
        'Malade',
        'R√©serve',
        'S√©lections'
    ]

    df_leg = df_pr√©sence_filtr√©[colonnes_pr√©sences].copy()

    header = "| " + " | ".join(colonnes_pr√©sences) + " |"
    separator = "| " + " | ".join(["---"] * len(colonnes_pr√©sences)) + " |"
    rows = [
        "| " + " | ".join(str(int(x)) if isinstance(x, (int, float)) and x == int(x) else str(x) for x in row) + " |"
        for row in df_leg.values
    ]

    st.markdown("\n".join([header, separator] + rows))
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# Graph Pr√©sences
if not df_pr√©sence_filtr√©.empty:
    totaux = df_leg.sum()
    labels = ['Pr√©sences', 'Absences', 'Blessures', 'Malade', 'R√©serve', 'S√©lections']
    values = [
        totaux['Pr√©sences'],
        totaux['Absences'],
        totaux['Blessures'],
        totaux['Malade'],
        totaux['R√©serve'],
        totaux['S√©lections']
    ]

    fig = px.pie(
        names=labels,
        values=values,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("‚ÑπÔ∏è Aucune statistique disponible pour ce joueur.")

# --- Poids et Masse Grasse ---
poids_path = os.path.join(data_dir, "Poids-Masse grasse.xlsx")
try:
    df_PoidsMG_joueur = pd.read_excel(poids_path)
except Exception as e:
    st.error(f"Erreur lors du chargement du fichier Poids-Masse grasse.xlsx : {e}")
    st.stop()

st.subheader("Poids")

df_PoidsMG_filtr√© = df_PoidsMG_joueur[df_PoidsMG_joueur['Nom du joueur'] == joueur_choisi]

if not df_PoidsMG_filtr√©.empty:
    colonnes_poids = ['Date', 'Poids (en kg)']

    if all(col in df_PoidsMG_filtr√©.columns for col in colonnes_poids):
        df_leg = df_PoidsMG_filtr√©[colonnes_poids].copy()
        df_leg['Date'] = pd.to_datetime(df_leg['Date'])
        df_leg = df_leg.sort_values('Date')
        df_leg['Date affich√©e'] = df_leg['Date'].dt.strftime("%d/%m/%Y")

        # Tableau Markdown
        header = "| Date | Poids (en kg) |"
        separator = "|---|---|"
        rows = [f"| {row[0]} | {row[1]} |" for row in df_leg[['Date affich√©e', 'Poids (en kg)']].values]
        st.markdown("\n".join([header, separator] + rows))

        # Graph √©volution poids
        fig = px.line(df_leg, x='Date', y='Poids (en kg)', title="√âvolution du poids")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Colonnes Poids non trouv√©es dans le fichier.")
else:
    st.info("‚ÑπÔ∏è Pas de donn√©es de poids pour ce joueur.")

# Masse grasse
st.subheader("Masse Grasse")

if not df_PoidsMG_filtr√©.empty:
    colonnes_masse = ['Date', 'Masse grasse (%)']

    if all(col in df_PoidsMG_filtr√©.columns for col in colonnes_masse):
        df_leg = df_PoidsMG_filtr√©[colonnes_masse].copy()
        df_leg['Date'] = pd.to_datetime(df_leg['Date'])
        df_leg = df_leg.sort_values('Date')
        df_leg['Date affich√©e'] = df_leg['Date'].dt.strftime("%d/%m/%Y")

        header = "| Date | Masse grasse (%) |"
        separator = "|---|---|"
        rows = [f"| {row[0]} | {row[1]} |" for row in df_leg[['Date affich√©e', 'Masse grasse (%)']].values]
        st.markdown("\n".join([header, separator] + rows))

        fig = px.line(df_leg, x='Date', y='Masse grasse (%)', title="√âvolution masse grasse")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Colonnes Masse grasse non trouv√©es dans le fichier.")
else:
    st.info("‚ÑπÔ∏è Pas de donn√©es de masse grasse pour ce joueur.")
